/**
  *FILE IS GENERATED DON'T MODIFY 
*//**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Note on: function(window, undefined)
 *
 * The undefined is a normal variable and can be changed simply with
 * undefined = "new value";. So we create a local "undefined" variable
 * that is REALLY undefined. (see jquery source for example in the wild)
 *
 * The window variable is made local for performance reasons.
 * Because when javascipt looks up a variable, it first goes through the
 * local variables until it finds the variable name. When it's not found,
 * javascript goes through the next scope etc. until it filters through the
 * global variables. So if the window variable is made local, javascript
 * can look it up quicker.
 *
 * Source (Nicholas C. Zakas and Jquery)
 *
 */

/**
 * This is a wrapper that our entire sdk goes into. Its written into by
 * a compiler script don't edit this file unless you know what you are doing.
 */

(function(window, undefined){

  /**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Entry point into groupit javascript SDK.
 *
 * The entire SDK is wrapped in a closure when compiled so don't let
 * the seemingly global definitions confuse you. They are global to the SDK
 * but not to the app.
 */

//Save references in case of overwrite/no conflict mode
var _G = window.G;
var _isLogging = true;

var G = G || {
  instanceId:null, //(AKA instance-private key)
  appKey:null, //(AKA App Identifier)

  init:function(appKey, callback) {
    G.appKey = appKey;

    //Needs the app key before call
    G.api("/misc/random_hash", function(json) {
      G.instanceId = json.hash_digest;
      callback();
    });
  }
  ,

  /**
   * Copy from one object to the specified namespace that is G.<target>.
   * If the namespace target doesn't exist, it will be created automatically.
   *
   * @param target    {Object|String}  the target object to copy into
   * @param source    {Object}         the source object to copy from
   * @param overwrite {Boolean}        indicate if we should overwrite
   * @return {Object} the *same* target object back
   */
  provide: function(target, source, overwrite) {
    return this.copy(
      typeof target == 'string' ? this.create(target) : target,
      source,
      overwrite
      );
  }
  ,
  /**
   * Create a namespaced object.
   *
   * @param name {String} full qualified name ('Util.foo', etc.)
   * @param value {Object} value to set. Default value is {}. [Optional]
   * @return {Object} The created object
   */
  create: function(name, value) {
    var node = G,
      nameParts = name ? name.split('.') : [],
      len = nameParts.length;
    for (var i = 0; i < len; i++) {
      var part = nameParts[i];
      var nso = node[part]; //nso = namespaced object
      if (!nso) { //prevents overriding
        nso = (value && i + 1 == len) ? value : {};
        node[part] = nso;
      }
      node = nso;
    }
    return node;
  }
  ,
  /**
   * Copies things from source into target.
   *
   * @param target    {Object}
   * @param source    {Object}
   * @param overwrite {Boolean}
   * @param transform  {function} [Optional], transformation function for
   *                            each item
   */
  copy: function(target, source, overwrite, transform) {
    for (var key in source) {
      if (overwrite || typeof target[key] === 'undefined') {
        target[key] = transform ? transform(source[key]) : source[key];
      }
    }
    return target;
  }
  ,

  /**
   * Removes standard groupit bindings from global namespace and
   *   replaces with user supplied alternative.
   *
   * @param altName {String} alternative global reference name
   */
  noConflict: function(altName) {
    //noConflicting with G sets to default
    if (altName == "G") {
      window.G = G;

    }
    else if (altName) {
      window[altName] = G;
      window.G = _G; //replace G with what was G before
    }

    globalName = altName;
    return G;
  }
}
  ;

//Do the proper bindings for the window.
window.G = G;

//SDK reference to itself in the caller's global namespace
var globalName = "G";

/**
 * Copyright (c) 2010 Timothy Cardenas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
  
G.provide('Array', {
  
  // This is native javascript function HOWEVER IE (7) BLOWS
  // and we force its definition here if its not defined
  indexOf: function (array, item){
    if (array.indexOf) {
      return array.indexOf(item);
    }
    var length = array.length;
    if (length) {
      for (var index = 0; index < length; index++) {
        if (array[index] === item) {
          return index;
        }
      }
    }
    return -1;
  }


});
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

//Taken from http://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx
G.provide("browser", {

  // Returns the version of Internet Explorer or a -1
  // (indicating the use of another browser).
  ieVersion: function()
  {
    var rv = -1; // Return value assumes failure.
    if (navigator.appName == 'Microsoft Internet Explorer')
    {
      var ua = navigator.userAgent;
      var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
      if (re.exec(ua) != null)
        rv = parseFloat( RegExp.$1 );
    }
    return rv;
  }
  
})/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("date",{
  /**
   * I hate those lazy javascript core developers that didn't bake this in.
   */

  //Taken from here: http://www.pelagodesign.com/blog/2009/05/20/iso-8601-date-validation-that-doesnt-suck/
  isIso8601Date:function(string){
    if(!string) return false;
    return string.match(/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/);
  },

  //Taken from last example on: https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference:Global_Objects:Date
  iso8601DateString:function(date){
    function pad(n){
      return n<10 ? '0'+n : n
    }
    return date.getUTCFullYear()+'-'
    + pad(date.getUTCMonth()+1)+'-'
    + pad(date.getUTCDate())+'T'
    + pad(date.getUTCHours())+':'
    + pad(date.getUTCMinutes())+':'
    + pad(date.getUTCSeconds())+'Z'
  }

})/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 */


G.provide("", {
  /**
   * addEvent
   *
   * Adds a eventhandler to the specified event without overriding previously
   * defined eventhanders.
   *
   * @param object      {Object}         object to watch for the event
   * @param eventType   {String}         event type (eg click, load, blur)
   * @param eventHandler {Function}       function to handle the event
   */
  addEvent:function(object, eventType, eventHandler) {
    G.eventManager.addEvent.call(G.eventManager, object, eventType, eventHandler);
  },

  /**
   * removeEvent
   *
   * Removes a eventhandler to the specified event without overriding previously
   * defined eventhanders. Must match the AddEvent call exactly
   *
   * @param object      {Object}         object to attach the event to
   * @param eventType   {String}         event type (eg click, load, blur)
   * @param eventHandler {Function}       function to handle the event
   */

  removeEvent:function(object, eventType, eventHandler) {
    G.eventManager.removeEvent.call(G.eventManager, object, eventType, eventHandler);
  }

});

// AddEvent and removeEvent Taken from his excellency John Resig
G.provide("eventManager", {
  addEvent:function(obj, type, fn) {
    if (obj.attachEvent) {
      obj['e' + type + fn] = fn;
      obj[type + fn] = function() {
        obj['e' + type + fn](window.event);
      };
      obj.attachEvent('on' + type, obj[type + fn]);
    }
    else {
      obj.addEventListener(type, fn, false);
    }
  },

  removeEvent: function(obj, type, fn) {
    if (obj.detachEvent) {
      obj.detachEvent('on' + type, obj[type + fn]);
      obj[type + fn] = null;
    }
    else {
      obj.removeEventListener(type, fn, false);
    }
  }

});

/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("", {

  initialize:function(appKey, endpoint, callback) {

    //Sets our endpoint (ie where we send api requests)
    G.ApiClient.init(endpoint);
    
    //Construct our rails models and api objects
    G.RestObject.init();

    //Begin routing observation of the window bar
    G.router.init();

    //Setup our tokens and keys for this G instance
    G.init(appKey, function(){
      callback();
      //After the callback for the program to initalize we execute a route lookup
      G.router.execRoute();
    });
  }
});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("", {

  log:function(message){
    if(window.console){
      window.console.log(message);
    }
  }
});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @provides G.api G.ApiClient
 * @requires G.provide G.Array
 *
 */

G.provide("QS", {
  /**
   * Encode parameters to a query string.
   *
   * @access private
   * @param   params {Object}  the parameters to encode
   * @param   sep    {String}  the separator string (defaults to '&')
   * @param   encode {Boolean} indicate if the key/value should be URI encoded
   * @return        {String}  the query string
   */
  encode: function(params, seperator, encode) {
    seperator = seperator === undefined ? '&' : seperator;
    encode = encode === false ? function(s) {
      return s;
    } : encodeURIComponent;

    var kvPairs = [];
    for(var key in params){
      var val = params[key];
      if (val !== null && typeof val != 'undefined') {
        kvPairs.push(encode(key) + '=' + encode(val));
      }
    }
    kvPairs.sort();
    return kvPairs.join(seperator);
  }
  
});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @provides G.api G.ApiClient
 * @requires G.provide G.Array
 *
 */

G.provide('', {

  //Indirection method for the api calls. Can expand out
  //for richer debuging support, etc
  api: function() {
    G.ApiClient.rest.apply(G.ApiClient, arguments);
  },

  //Allows for posting of forms to remote destinations
  postForm:function(path, method, params, fullPath) {
    var form = G.ApiClient.createForm(path, method, params, fullPath);
    G.ApiClient.iframeRequest(form);
  }

});

G.provide('ApiClient', {
  REST_METHODS: ['get', 'post','delete', 'put'],
  REST_BASE_URL: "http://localhost:3000/",

  init:function(endpoint) {
    G.ApiClient.REST_BASE_URL = endpoint;
  },

  /**
   *   rest: REST access to our server with various calling options.
   *
   *   Except for the path all the arguments to this function are
   *   optional. Below are examples of valid invocations.
   *
   *  G.api('gift/delete'); // throw away the response
   *  G.api('gift/delete'), function(r){console.log(r)});
   *  G.api('gift/show'), { param1: 'value1', ... }); //throw away response
   *  G.api('gift', 'put', function(r){ console.log(r) });
   *  G.api(
   *    'gift/create',
   *    'post',
   *    {param1: value1, param2 : value2, ...},
   *    function(r) { console.log(r) }
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   * @param cb        {Function} the callback function for the response
   */

  rest: function() {
    var
      args = Array.prototype.slice.call(arguments),
      path = args.shift(),
      next = args.shift(),
      method, params, cb, doCors;

    while (next) {
      var type = typeof next;
      if (type === 'string' && !method) {
        method = next.toLowerCase();
      } else if (type === 'function' && !cb) {
        cb = next;
      } else if (type === 'object' && !params) {
        params = next;
      } else {
        G.log('Invalid argument passed to G.api(): ' + next);
        return;
      }
      next = args.shift();
    }

    method = method || 'get';
    params = params || {};


    // remove prefix slash if one is given, as it's already in the base url
    if (path[0] === '/') {
      path = path.substr(1);
    }

    if (G.Array.indexOf(G.ApiClient.REST_METHODS, method) < 0) {
      G.log('failed on rest methods');
      return; //Need to create a logging mech
    }

    G.ApiClient.corsRequest(path, method, params, cb);

    //    var form = G.ApiClient.createForm(path, method, params);

    //    G.ApiClient.iframeRequest(form, cb);
  },

  corsRequest:function(path, method, params, cb) {
    var isGet = method.toLowerCase() == "get";
    var queryString = G.QS.encode(params);

    var url = this.REST_BASE_URL + path;
    if (isGet) {
      url += "?" + queryString;
    }


    var xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr) {
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest != "undefined") {
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      throw("corsRequest: cross site xhr not available");
    }

    if (cb) {
      xhr.onload = function() {
        var response = xhr.responseText;
        //TODO need to parse the json better than with evals.
        if (xhr.getResponseHeader("Content-Type")) {
          var contentType = xhr.getResponseHeader("Content-Type").toLowerCase();
          if (contentType.indexOf("application/json") != -1 && response.replace(/\s*/, "")) {
            eval('var response = ' + response);
          }
        }
        cb(response, xhr);
      }
    }

    if (isGet) {
      xhr.send();
    } else {
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.send(queryString);
    }

  },

  nonCorsDispatch:function(path, method, params, cb) {
    if (method === 'post') {
      var form = G.ApiClient.createForm(path, method, params);
    }

  },

  /**
   *  createForm: Creates a form to submit as a substitute for XHRs.
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   * @param fullPath  {Boolean}  If the path is a fullpath to a resource
   *
   */

  createForm:function(path, method, params, fullPath) {
    var form = document.createElement('form');

    if (fullPath) {
      form.action = path;
    } else {
      form.action = this.REST_BASE_URL + path;
    }

    form.method = method;

    for (var key in params) {
      var input = document.createElement('input');
      input.type = 'hidden'; //DEBUG text
      input.name = key;
      input.value = params[key];
      form.appendChild(input);
    }

    return form;
  },

  /**
   * iframeRequest: Submits a form using a spawned Iframe.
   *
   * @access private
   * @param form      {object}   Dom node representing a form for submission
   */
  iframeRequest: function(form) {

    //Prevents form passed in from being destroyed in call.
    form = form.cloneNode(true);

    var iframe = document.createElement('iframe');
    iframe.style.display = "absolute";
    iframe.style.top = "-10000px";
    iframe.style.height = "0px";
    iframe.style.width = "0px";

    document.body.appendChild(iframe); //initializes iframe

    iframe.contentWindow.document.body.appendChild(form);
    form.submit();
  }


});
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


/**
 * Definition - Chainable Function:
 *   A Chainable function must define a callback function it calls when it
 *   is finished processing. The generic signiture that a Chainable Function
 *   must adhere to is: fn(callback) or fn(params_for_fn, callback);
 *   That callback function must be called for the chain to continue firing
 */

G.provide("", {

  newFnChain:function() {
    return new G.FnChain.Base();
  }
});

G.provide("FnChain", {

  Base:function() {
    var chain = [];


    /**
     * Push a Chainable Function onto the chain queue
     *
     * @param fn       {Function}           A chainable function to be
     *                                        pushed on the queue
     * @param params   {Array}[Optional]    Array of params
     *                                        for the chainable function
     * @param callback {Function}[Optional] Callback called after this link
     *
     */
    this.push = function() {
      var args = Array.prototype.slice.call(arguments),
        fn = args.shift(),
        next = args.shift(),
        params = null,
        callback = null,
        cbParams = null;

      while (next) {
        var type = typeof next;
        if (type === 'function' && !callback) {
          callback = next;
        } else if (next instanceof Array && !params) {
          params = next;
        } else if (next instanceof Array && !cbParams) {
          cbParams = next;
        } else {
          throw('Invalid argument passed to FnChain.push(): ' + next);
          return this;
        }
        next = args.shift();
      }

      var link = {
        fn:fn,
        params:params,
        callback:callback
      };

      chain.push(link);

      return this; //Makes push chainable (in the jquery sense)
    };

    /**
     * Pushes a function that isn't a "chainable function" by wrapping it
     * in a generic chainable function.
     * 
     * @param fn
     */
    this.pushNc = function(fn){

      function correctedFn(params, callback){
        fn.apply(this, params);
        callback();
      }

      this.push(correctedFn);
    };
    
    /**
     * Sequentially fire the functions and callbacks in the chain FIFO.
     */
    this.fire = function() {
      if (chain.length <= 0) return;

      var link = chain.shift(), callee = arguments.callee;
      if (link.params) {
        //Copying the params allows the chain to be fired again without side effects
        var tempParams = [];
        G.copy(tempParams, link.params);
        tempParams.push(modifiedCallback);
        link.fn.apply(this, tempParams);
      }
      else {
        link.fn(modifiedCallback);
      }

      function modifiedCallback() {
        if (link.callback) {
          link.callback.apply(this, arguments);
        }
        callee();
      }
    }

    this.clear = function() {
      chain = [];
    }
  }

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Models are instantiated in RestObject in restObject.js
 */

G.provide("", {
  //public handle 
  contribution:null
});

G.provide("models.contribution", {

  init:function() {
    var base = new G.RestObject.Base("/contributions", "contribution");
    G.models.contribution.Base.prototype = base;
    G.contribution = new G.models.contribution.Base();
  },

  /**
   * Base constructor function for the contribution model
   */
  Base:function() {
    this.create = function(params, callback) {
      var newParams = G.RestObject.injectRailsParams({}),
        pollTicket = G.polling.randomTicket();

      //Get the contribution settings
      G.api("/contributions/new", "get", newParams, function(json) {
        var brainTreeUrl = json.url,
          tr_data = json.tr_data,
          c = G.models.contribution;

        params = G.RestObject.injectRailsParams(params);
        var braintreeFormParams = c.braintreeParams(tr_data, pollTicket, params);

        //Post the contribution to braintree
        G.postForm(brainTreeUrl, "post", braintreeFormParams, true);

        //Initialize the polling mechanism to look for the response on the server
        var pollingParams = G.RestObject.injectPollTicket({}, pollTicket);
        pollForResponse(pollingParams, 0);
      });

      function pollForResponse(requestParams, attempts) {
        G.contribution.pollOnce(requestParams, function(json, xhr) {
          if (attempts > 10) {
            var hash = {
              error:{
                message: "After " + attempts + " attempts no contribution was found"
              }
            };
            if (callback) callback(hash, xhr);
          } else if (xhr.status == "204") {//No content means still looking
            continuePolling(1000);
          } else if (xhr.status == "200") { //JSON should be loaded
            if (callback) callback(json, xhr);
          } else {
            G.log("Polling returned a unexpected status:" + xhr.status);
          }

          function continuePolling(timeout) {
            setTimeout(function() {
              pollForResponse(requestParams, attempts + 1);
            }, timeout);
          }
        });
      }
    };
  },

  /**
   * Takes a list of params and converts them into the braintree format for
   * processing.
   *
   * @param tr_data     {Object} Braintree configuration
   * @param pollTicket  {String} Hash that we use to poll for a response
   * @param params      {Object} Should be a object
   *                                   with the following structure:
   *
   * params = {
   *   amount:
   *   groupitId:
   *   userId:
   *   customer: {},
   *   cc:{},
   *   billing:{}
   * }
   *
   * customer has the following fields:
   *   firstName
   *   lastName
   *   email
   *
   * cc has the following fields:
   *   cardholderName: Must exactly match the name on the card
   *   number
   *   ccv
   *   month
   *   year
   *
   * billing has the following fields:
   *   firstName
   *   lastName
   *   address1 : first line of the address fields
   *   address2: second line of the address fields
   *   locality
   *   region
   *   postalCode
   *   countryCode : Must be in the ISO Standard format
   *   phone
   *
   * We also inject app_key and session token at the base for you
   *
   */
  braintreeParams:function(tr_data, pollTicket, params) {
    return {
      "tr_data":tr_data,
      "transaction[custom_fields][poll_ticket]": pollTicket,
      "transaction[custom_fields][groupit_id]":params.groupitId,
      "transaction[custom_fields][user_id]":params.userId,
      "transaction[custom_fields][app_key]":params.app_key,
      "transaction[custom_fields][session_token]":params.session_token,
      "transaction[amount]" : params.amount,
      "transaction[customer][first_name]": params.customer.firstName,
      "transaction[customer][last_name]": params.customer.lastName,
      "transaction[customer][email]":params.customer.email,
      "transaction[credit_card][cardholder_name]":params.cc.cardholderName,
      "transaction[credit_card][number]":params.cc.number,
      "transaction[credit_card][cvv]":params.cc.cvv,
      "transaction[credit_card][expiration_month]":params.cc.month,
      "transaction[credit_card][expiration_year]":params.cc.year,
      "transaction[billing][first_name]":params.billing.firstName,
      "transaction[billing][last_name]":params.billing.lastName,
      "transaction[billing][street_address]":params.billing.address1,
      "transaction[billing][extended_address]":params.billing.address2,
      "transaction[billing][locality]":params.billing.locality,
      "transaction[billing][region]":params.billing.region,
      "transaction[billing][postal_code]":params.billing.postalCode,
      "transaction[billing][country_code_alpha2]":params.billing.countryCode,
      "transaction[customer][phone]":params.billing.phone
    }
  }


});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("polling", {

  /**
   * Creates a unique ticket across all instances of our framework for polling
   */

  randomTicket:function() {
    var date = new Date();
    return G.appKey + "" + G.instanceId + "" + date.getTime();
  }

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


G.provide("RestObject", {

  sessionToken: null,
  appSecret:null,

  init:function() {
    G.models.contribution.init();

  },

  Base:function(root_path, object_name) {
    var request_type = ".json";

    /**
     * Base Index call for all RestObject Objects
     */
    this.index = function(params, callback) {
      var path = root_path + request_type;
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "get", params, callback);
    };

    /**
     * Base Create call for all RestObject Objects.
     * Automatically pulls out a singular object from the json response
     */
    this.create = function(params, callback) {
      var path = root_path + request_type;
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "post", params, function(json, xhr) {
        if (callback) {
          callback(json[object_name], xhr);
        }
      });
    };

    /**
     * Base Read call for all RestObject Objects
     * Automatically pulls out a singular object from the json response
     */
    this.read = function(params, callback) {
      var path = root_path + "/" + params.id + request_type;
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "get", params, function(json, xhr) {
        if (callback) {
          callback(json[object_name], xhr);
        }
      });
    };

    /**
     * Base Update call for all RestObject Objects.
     * Per rails convention this call updates and doesn't return the updated model
     */
    this.update = function(params, callback) {
      var path = root_path + "/" + params.id + request_type;
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "put", params, callback);
    };
    /**
     * Base Destroy call for all RestObject Objects
     */
    this.destroy = function(params, callback) {
      var path = root_path + "/" + params.id + request_type;
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "delete", params, callback);
    };

    //Is intended only for framework polling
    this.pollOnce = function(params, callback) {
      var path = root_path + "/poll";
      params = railify(params, object_name);
      params = G.RestObject.injectRailsParams(params);
      G.api(path, "get", params, callback);
    };

    /**
     * Rails uses a bracket notation to namespace key-value pairs relating
     * to a model. Example : user[:id] where user is the model name and id is
     * the attribute to be sent to the server.
     */
    function railify(params, object_name) {
      var rails_params = {};
      for (var key in params) {
        if (key == "id") continue;
        if (key == "poll_ticket"){
          rails_params[key] = params[key];
          continue;// Need to do a better job here
        }
        rails_params[object_name + "[" + key + "]"] = params[key];
      }
      return rails_params;
    }


  },

  /**
   * Injects the session token and app key into the params passed in.
   * @param params {Object} Params going to the server without auth tokens
   *
   */
  injectRailsParams: function(params) {
    params['session_token'] = G.RestObject.sessionToken;
    params['app_key'] = G.appKey;

    //Should only be used while testing
    if (G.RestObject.appSecret)
      params['app_secret'] = G.RestObject.appSecret;

    if (params['app_secret'] && !G.RestObject.appSecret)
      throw "App secret not set using G.RestObject.appSecret";

    return params;
  },

  injectPollTicket: function(params, pollTicket) {
    params.poll_ticket = pollTicket;
    return params;
  }


});


/**
 * Must be called after RestObject has been defined. Done because each property
 * when initialized by javascript is actually a function execution. Could write
 * this without the load order dependency but this is less code to write
 */
G.provide("", {

  user:function() {
    //We allow a couple convenience functions for logging in users
    function Override() {
      this.login = function(params, callback) {
        G.userSession.create(params, callback);
      };

      this.logout = function(callback) {
        G.userSession.destroy({}, callback);
      };

      this.isLoggedIn = function() {
        return !!G.RestObject.sessionToken
      };

    }

    Override.prototype = new G.RestObject.Base("/users", "user");

    return new Override();
  }(),

  userSession:function() {

    var base = new G.RestObject.Base("/user_sessions", "user_session");

    function Override() {
      this.create = function(params, callback) {
        base.create(params, function(userSession, xhr) {
          G.RestObject.sessionToken = userSession.token;
          if (callback) {
            callback(userSession, xhr);
          }
        });
      };

      delete this.update;
      delete this.read;
      delete this.index;

      this.destroy = function(params, callback) {
        G.RestObject.sessionToken = null;
        params = {
          id:0 //Simple hack to make rails route correctly
        };
        base.destroy(params, callback);
      }
    }

    Override.prototype = base;

    return new Override();
  }(),

  paymentResponse:function() {
    return new G.RestObject.Base("/payment_responses", "payment_response");
  }(),

  groupit:function() {
    return new G.RestObject.Base("/groupits", "groupit");
  }(),

  participant:function() {
    return new G.RestObject.Base("/participants", "participant");
  }(),

  note:function() {
    return new G.RestObject.Base("/notes", "note");
  }(),

  feedPost:function() {
    return new G.RestObject.Base("/feed_posts", "feed_post");
  }(),

  email:function() {
    return new G.RestObject.Base("/emails", "email");
  }(),

  authentication:function() {
    return new G.RestObject.Base("/authentications", "authentication");
  }(),

  app:function() {
    return new G.RestObject.Base("/apps", "app");
  }(),

  address:function() {
    return new G.RestObject.Base("/addresses", "address");
  }()

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("", {
  route:function(hash, callback) {
    G.router.route.call(G.router, hash, callback);
  }
});

G.provide("router", {

  routes: {},

  init:function() {
    G.addEvent(window, 'hashchange', G.router.execRoute);
  },

  route:function(hash, callback) {
    G.router.routes[hash] = callback;
  },

  execRoute:function() {
    var hash = window.location.hash.slice(1),
      callback = G.router.routes[hash];
    if (callback) callback();
  }

});

//Gets called at framework runtime
//(function() {

//  backup if hashchange event is not supported for ie7 (bah! FUCKING IE)
//  if(G.browser.ieVersion() < 8){
//    var ieFrame = document.createElement("iframe");
//    var prevHash = null;
//    setInterval(function(){
//      if(window.location.hash != prevHash){
//        G.router.execRoute();
//        prevHash = window.location.hash;
//      }
//    }, 150);
//  }

//})();
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING fromWidget, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Provides basic support for transitioning between components.
 */
G.provide("", {
  newTransitionMap:function() {
    return new G.transition.Base();
  }
});


G.provide("transition", {

  Base:function() {
    var transitions = {};

    this.addTransitions = function(transObj) {
      G.copy(transitions, transObj, true);
    };

    this.trigger = function(fromWidget, toWidget) {
      var fn;
      if (!toWidget) throw("G.transition.trigger: Must go somewhere with toWidget");
      if (!fromWidget) {
        fn = transitions[toWidget.name];
        if (fn) fn(toWidget);
      } else {
        fn = transitions[fromWidget.name + "_" + toWidget.name];
        if (fn) fn(fromWidget, toWidget);
      }
    };
  }


});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 * @provides G.pages G.widget
 * @requires G.provide G.ApiClient
 *
 */


/**
 * widget.js
 * Exposes api for manipulating
 *
 */

G.provide("", {
  require: function() {
    return G.widget.require.apply(G.widget, arguments);
  },

  newWidget:function() {
    return G.widget.instance.apply(G.widget, arguments);
  },

  register:function() {
    return G.widget.register.apply(G.widget, arguments);
  }

});

G.provide("widget", {

  constructors: {},
  html:{},

  /**
   * Base constructor for all Widget instances
   */
  Base: function(name, widgetType) {

    this.name = name;
    this._html = G.widget.html[widgetType];
    this.rootNode = initRootNode();

    function initRootNode() {
      var div = document.createElement("div"); //garbage collected automatically
      div.innerHTML = G.widget.html[widgetType];
      return div;
    }

    this.hashOnAttribute = function(hash, attr) {
      var elems = this.rootNode.getElementsByTagName("*");
      for (var i in elems) {
        var elem = elems[i], pid;
        if (!!elem.getAttribute && !!(pid = elem.getAttribute(attr))) {
          hash[pid] = elem;
        }
      }
    };

    this.preventDefault = function(e) {
      if (!e) {
        return;
      }

      //Everyone else support for canceling events
      if (e.preventDefault) {
        e.preventDefault();
      }

      //IE support for canceling events
      e.returnValue = false;
    };

  
    this.detach = function() {
      var parent = this.rootNode.parentNode;
      if (parent) parent.removeChild(this.rootNode);
    };

  },

  /**
   * Creates a instance of our widget
   * @param name {String} The name of the instance, used for transitions etc
   * @param widgetType {String} The widget type declared with register
   * @param instanceObject {Object}[Optional] Extends instance with this obj
   */
  instance:function(name, widgetType, instanceObject) {

    if (!G.widget.constructors[widgetType]) {
      throw("G.widget.instance called on null constructor. (" + widgetType + ")");
    }
    if (!name) {
      throw("G.widget.instance called without a instance name");
    }

    var instance;
    (function(realG) { //could limit access to G if needed
      var fn, pids = {}, base;

      //Forces page constructor to be lexicaly bound to our current context
      //instead of iframe (current context should be current closure and
      //then main page closure)
      eval("fn = " + G.widget.constructors[widgetType].toString() + ";");

      //By default hash all elems with a pid for quick lookup later
      //pids hash avail in page (looks like global) but is just bound
      //in that page. (<3 closures). Do before instance is created so
      //pids hash can be referenced during instantiation.
      base = new realG.widget.Base(name, widgetType);
      fn.prototype = base;
      base.hashOnAttribute(pids, "pid");

      instance = new fn();

      //Adds the instance data into the instance overwriting if necessary
      if (instanceObject) {
        G.copy(instance, instanceObject, true);
      }

      function S(selector) {
        if (jQuery) {
          return jQuery(base.rootNode).find(selector);
        }
      }

    })(G);

    return instance;
  },

  register: function(widgetType, pageConstructor) {

    if (typeof pageConstructor != "function") {
      throw("Fatal: G.widget.register only takes a constructor function as a argument");
    }

    G.widget.constructors[widgetType] = pageConstructor;
  },

  require:function(path, widgetType) {
    G.widget.require.pages = G.Page.require.pages || {};

    widgetType = widgetType || G.widget.pathToName(path);

    //No Op when the page has already been required
    if (G.widget.require.pages[widgetType]) {
      return;
    }

    G.widget.require.pages[widgetType] = widgetType;


    if (!G.widget.constructors[widgetType]) {
      G.widget.fetch(path, widgetType);
    }

  },

  ready:function(widgetTypes, callback) {
    var intervalId,
      timeWaiting = 0,
      interval = 50;

    intervalId = setInterval(function() {
      timeWaiting += interval
      if (timeWaiting > 1000) {
        G.log("G.widget.ready waiting over a second for ready state.");
        timeWaiting = 0;
      }

      for (var i in widgetTypes) {
        var widgetType = widgetTypes[i];
        if (!G.widget.constructors[widgetType]) {
          return;
        }
      }
      clearInterval(intervalId);

      callback();

    }, interval);
  },

  fetch: function() {
    var args = Array.prototype.slice.call(arguments),
      path = args.shift(),
      next = args.shift(),
      widgetType,
      callback;

    while (next) {
      var type = typeof next;

      if (type === 'string' && !widgetType) {
        widgetType = next;
      } else if (type === 'function' && !callback) {
        callback = next;
      }
      else {
        G.log('Invalid argument passed to G.widget.fetch(): ' + next);
        return;
      }
      next = args.shift();
    }


    //Default widgetType will be the route to it with / replaced with undescores
    widgetType = widgetType || G.widget.pathToName(path);

    G.widget.fetchRequest(path, widgetType, callback);
  },

  pathToName:function(path) {
    return path.replace(/\//g, "_");
  },


  /**
   *
   */

  fetchRequest: function(path, widgetType, callback) {

    //Preamble = dirty magic to pull references into iframe,
    //couples js with controller :(
    var preamble = "<script>window.G = top." + globalName + ";</script>";

    G.ApiClient.rest('widgets/show', 'get', {
      path: path,
      preamble: preamble,
      page_name: widgetType
    }, function(html) {

      if (!!callback) {
        callback(G.widget.constructors[widgetType]);
      }
    });
  }
});

  })(window);