/**
  *FILE IS GENERATED DON'T MODIFY 
*//**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Note on: function(window, undefined)
 *
 * The undefined is a normal variable and can be changed simply with
 * undefined = "new value";. So we create a local "undefined" variable
 * that is REALLY undefined. (see jquery source for example in the wild)
 *
 * The window variable is made local for performance reasons.
 * Because when javascipt looks up a variable, it first goes through the
 * local variables until it finds the variable name. When it's not found,
 * javascript goes through the next scope etc. until it filters through the
 * global variables. So if the window variable is made local, javascript
 * can look it up quicker.
 *
 * Source (Nicholas C. Zakas and Jquery)
 *
 */

/**
 * This is a wrapper that our entire sdk goes into. Its written into by
 * a compiler script don't edit this file unless you know what you are doing.
 */

(function(window, undefined){

  /**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Entry point into groupit javascript SDK.
 *
 * The entire SDK is wrapped in a closure when compiled so don't let
 * the seemingly global definitions confuse you. They are global to the SDK
 * but not to the app.
 */

//Save references in case of overwrite/no conflict mode
var _G = window.G;
var _isLogging = true;
window.A = "Primary window"; //DEBUG

var G = G || {
  /**
   * Copy from one object to the specified namespace that is G.<target>.
   * If the namespace target doesn't exist, it will be created automatically.
   *
   * @param target    {Object|String}  the target object to copy into
   * @param source    {Object}         the source object to copy from
   * @param overwrite {Boolean}        indicate if we should overwrite
   * @return {Object} the *same* target object back
   */
  provide: function(target, source, overwrite){
    return this.copy(
      typeof target == 'string' ? this.create(target) : target,
      source,
      overwrite
      );
  },
  /**
   * Create a namespaced object.
   *
   * @param name {String} full qualified name ('Util.foo', etc.)
   * @param value {Object} value to set. Default value is {}. [Optional]
   * @return {Object} The created object
   */
  create: function(name, value) {
    var node = G,
    nameParts = name ? name.split('.') : [],
    len = nameParts.length;
    for (var i = 0; i < len; i++) {
      var part = nameParts[i];
      var nso = node[part]; //nso = namespaced object
      if (!nso) { //prevents overriding
        nso = (value && i + 1 == len) ? value : {};
        node[part] = nso;
      }
      node = nso;
    }
    return node;
  },
  /**
   * Copies things from source into target.
   *
   * @param target    {Object}
   * @param source    {Object}
   * @param overwrite {Boolean}
   * @param transform  {function} [Optional], transformation function for
   *                            each item
   */
  copy: function(target, source, overwrite, transform) {
    for (var key in source) {
      if (overwrite || typeof target[key] === 'undefined') {
        target[key] = transform ? transform(source[key]) :  source[key];
      }
    }
    return target;
  },
  /**
   * Removes standard groupit bindings from global namespace and
   *   replaces with user supplied alternative.
   *
   * @param altName {String} alternative global reference name
   */
  noConflict: function(altName){
    //noConflicting with G sets to default
    if(altName == "G"){
      window.G = G;
      
    }
    else if (altName){
      window[altName] = G;
      window.G = _G; //replace G with what was G before
    }

    globalName = altName;
    return G;
  }
};

//Do the proper bindings for the window.
window.G = G;

//SDK reference to itself in the caller's global namespace
var globalName = "G";

/**
 * Copyright (c) 2010 Timothy Cardenas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
  
G.provide('Array', {
  
  // This is native javascript function HOWEVER IE (7) BLOWS
  // and we force its definition here if its not defined
  indexOf: function (array, item){
    if (array.indexOf) {
      return array.indexOf(item);
    }
    var length = array.length;
    if (length) {
      for (var index = 0; index < length; index++) {
        if (array[index] === item) {
          return index;
        }
      }
    }
    return -1;
  }


});
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

//Taken from http://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx
G.provide("browser", {

  // Returns the version of Internet Explorer or a -1
  // (indicating the use of another browser).
  ieVersion: function()
  {
    var rv = -1; // Return value assumes failure.
    if (navigator.appName == 'Microsoft Internet Explorer')
    {
      var ua = navigator.userAgent;
      var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
      if (re.exec(ua) != null)
        rv = parseFloat( RegExp.$1 );
    }
    return rv;
  }
  
})/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 */


G.provide("", {
  /**
   * addEvent
   *
   * Adds a eventhandler to the specified event without overriding previously
   * defined eventhanders.
   * 
   * @param object      {Object}         object to watch for the event
   * @param eventType   {String}         event type (eg click, load, blur)
   * @param eventHander {Function}       function to handle the event
   */
  addEvent:function(object, eventType, eventHandler){
    G.eventManager.addEvent.call(G.eventManager, object, eventType, eventHandler);
  },

  /**
   * removeEvent
   *
   * Removes a eventhandler to the specified event without overriding previously
   * defined eventhanders. Must match the AddEvent call exactly
   *
   * @param object      {Object}         object to attach the event to
   * @param eventType   {String}         event type (eg click, load, blur)
   * @param eventHander {Function}       function to handle the event
   */

  removeEvent:function(object, eventType, eventHandler){
    G.eventManager.removeEvent.call(G.eventManager, object, eventType, eventHandler);
  }

});

// AddEvent and removeEvent Taken from his excellency John Resig
G.provide("eventManager", {
  addEvent:function( obj, type, fn ) {
    if ( obj.attachEvent ) {
      obj['e'+type+fn] = fn;
      obj[type+fn] = function(){
        obj['e'+type+fn]( window.event );
      }
      obj.attachEvent( 'on'+type, obj[type+fn] );
    }
    else{
      obj.addEventListener( type, fn, false );
    }
  },

  removeEvent: function( obj, type, fn ) {
    if ( obj.detachEvent ) {
      obj.detachEvent( 'on'+type, obj[type+fn] );
      obj[type+fn] = null;
    }
    else{
      obj.removeEventListener( type, fn, false );
    }
  }

})

/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("", {

  log:function(message){
    if(window.console){
      window.console.log(message);
    }
  }
});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @provides G.api G.ApiClient
 * @requires G.provide G.Array
 *
 */

G.provide("QS", {
  /**
   * Encode parameters to a query string.
   *
   * @access private
   * @param   params {Object}  the parameters to encode
   * @param   sep    {String}  the separator string (defaults to '&')
   * @param   encode {Boolean} indicate if the key/value should be URI encoded
   * @return        {String}  the query string
   */
  encode: function(params, seperator, encode) {
    seperator = seperator === undefined ? '&' : seperator;
    encode = encode === false ? function(s) {
      return s;
    } : encodeURIComponent;

    var kvPairs = [];
    for(var key in params){
      var val = params[key];
      if (val !== null && typeof val != 'undefined') {
        kvPairs.push(encode(key) + '=' + encode(val));
      }
    }
    kvPairs.sort();
    return kvPairs.join(seperator);
  }
  
});/**
 * Copyright (c) 2010 Timothy Cardenas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @provides G.api G.ApiClient
 * @requires G.provide G.Array
 *
 */
 
G.provide('', {

  //Indirection method for the api calls. Can expand out
  //for richer debuging support, etc
  api: function(){
    G.ApiClient.rest.apply(G.ApiClient, arguments);    
  }

});

G.provide('ApiClient', {
  REST_METHODS: ['get', 'post','delete', 'put'],
  REST_BASE_URL: "http://localhost:3000/",

  /**
   *   rest: REST access to our server with various calling options.
   *    
   *   Except for the path all the arguments to this function are 
   *   optional. Below are examples of valid invocations.
   *
   *  G.api('gift/delete'); // throw away the response
   *  G.api('gift/delete'), function(r){console.log(r)});
   *  G.api('gift/show'), { param1: 'value1', ... }); //throw away response
   *  G.api('gift', 'put', function(r){ console.log(r) });
   *  G.api(
   *    'gift/create',
   *    'post',
   *    {param1: value1, param2 : value2, ...},
   *    function(r) { console.log(r) }
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   * @param cb        {Function} the callback function for the response 
   */

  rest: function(){
    var 
    args = Array.prototype.slice.call(arguments),
    path = args.shift(),
    next = args.shift(),
    method,
    params,
    cb;
     
    while(next){
      var type = typeof next;
      if (type === 'string' && !method) {
        method = next.toLowerCase();
      } else if (type === 'function' && !cb) {
        cb = next;
      } else if (type === 'object' && !params) {
        params = next;
      } else {
        G.log('Invalid argument passed to G.api(): ' + next);
        return;
      }
      next = args.shift();
    }

    method = method || 'get';
    params = params || {};

    // remove prefix slash if one is given, as it's already in the base url
    if (path[0] === '/') {
      path = path.substr(1);
    }

    if (G.Array.indexOf(G.ApiClient.REST_METHODS, method) < 0){
      G.log('failed on rest methods');
      return; //Need to create a logging mech
    }

    G.ApiClient.corsRequest(path, method, params, cb);

  //    var form = G.ApiClient.createForm(path, method, params);

  //    G.ApiClient.iframeRequest(form, cb);
  },

  corsRequest:function(path, method, params, cb){
    var isGet = method.toLowerCase() == "get"
    var queryString = G.QS.encode(params);

    var url = this.REST_BASE_URL + path;
    if(isGet){
      url += "?" + queryString;
    }
    

    var xhr = new XMLHttpRequest();
    if ("withCredentials" in xhr){
      xhr.open(method, url, true);
    } else if (typeof XDomainRequest != "undefined"){
      xhr = new XDomainRequest();
      xhr.open(method, url);
    } else {
      throw("corsRequest: cross site xhr not available");
      return;
    }

    if(cb){
      xhr.onload = function(){
        var response = xhr.responseText
        var contentType = xhr.getResponseHeader("Content-Type").toLowerCase()
        if(contentType.indexOf("application/json") != -1 && response.replace(/\s*/, "")){
          eval('var response = '+response);
        }
        cb(response, xhr);
      }
    }



    if(isGet){
      xhr.send();
    }else{
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.send(queryString);
    }

  },

  /**
   *  createForm: Creates a form to submit as a substitute for XHRs.
   *
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   *
   */

  createForm:function(path, method, params){
    var form = document.createElement('form');
    form.action = this.REST_BASE_URL + path;
    form.method = method;

    for(var key in params){
      var input = document.createElement('input');
      input.type ='text'; //DEBUG text
      input.name = key;
      input.value = params[key];
      form.appendChild(input);
    }

    return form;
  },

  /**
   * iframeRequest: Submits a form using a spawned Iframe.
   *
   *
   * @access private
   * @param form      {object}   Dom node representing a form for submission
   * @param cb        {Function} the callback function for the response
   */
  iframeRequest: function(form, cb){

    //Prevents form passed in from being destroyed in call.
    form = form.cloneNode(true);

    var iframe = document.createElement('iframe');
    iframe.style.display = "absolute";
    iframe.style.top = "-10000px";
    iframe.style.height = "0px";
    iframe.style.width = "0px";
    
    document.body.appendChild(iframe); //initializes iframe
    

    //Load the content after submission to the callback
    if(false){
      iframe.onload = function(){

        var content;
        //the callback() method is inserted into our frame as a JSONP method
        if(!!iframe.contentWindow.callback){
          content= iframe.contentWindow.callback();
        }else{
          //Not a JSONP response, assume html/js is response and pass back
          content = iframe.contentWindow.document.body.innerHTML;
        }

        //Remember javascript uses static scoping (this callback will run
        //in the context of its definition and not where its being called--iframe)
        cb(content);
        
        //We have to set a timeout to kill the parent and let the onload
        //finish otherwise we get errors in browsers thinking that the response
        //never arrived. Functions like a 'after_load' event
        setTimeout(function(){
          //document.body.removeChild(iframe);
          }, 1); //IE doesn't accept 0 and all browsers round up to min delay ~10ms

      }
    }
      
    iframe.contentWindow.document.body.appendChild(form);
    form.submit();
  }


});
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


G.provide("restfulRails",{

  sessionToken: null,
  appKey:null,

  Base:function(root_path, object_name){
    var request_type = ".json"

    /**
     * Base Index call for all restfulRails Objects
     */
    this.index = function(params, callback){
      var path = root_path + request_type;
      params = injectRailsParams(params);
      G.api(path , "get", params, callback);
    }

    /**
     * Base Create call for all restfulRails Objects.
     * Automatically pulls out a singular object from the json response
     */
    this.create = function(params, callback){
      var path = root_path + request_type;
      params = railify(params,object_name);
      params = injectRailsParams(params);
      G.api(path, "post", params, function(json, xhr){
        if(callback){
          callback(json[object_name], xhr);
        }
      });
    }

    /**
     * Base Read call for all restfulRails Objects
     */
    this.read = function(params, callback){
      var path = root_path+"/"+params.id+ request_type;
      params = injectRailsParams(params);
      G.api(path, "get", params, callback);
    }

    /**
     * Base Update call for all restfulRails Objects.
     * Automatically pulls out a singular object from the json response
     */
    this.update = function(params, callback){
      var path = root_path +"/"+params.id+ request_type,
      params_cp = {};
      G.copy(params_cp, params); //Make a copy so we don't modify the orginal
      delete params_cp.id; //remove id so we don't try to modify it
      params_cp = railify(params_cp,object_name);
      params_cp = injectRailsParams(params_cp);
      G.api(path, "put", params_cp, function(json, xhr){
        if(callback){
          callback(json[object_name], xhr);
        }
      });
    }
    /**
     * Base Destroy call for all restfulRails Objects
     */
    this.destroy = function(params, callback){
      var path = root_path +"/"+params.id+ request_type;
      params = injectRailsParams(params);
      G.api(path, "delete", params, callback);
    }

    /**
     * Rails uses a bracket notation to namespace key-value pairs relating
     * to a model. Example : user[:id] where user is the model name and id is
     * the attribute to be sent to the server.
     */
    function railify(params, object_name){
      var rails_params = {};
      for(var key in params){
        rails_params[object_name+"["+key+"]"] = params[key];
      }
      return rails_params;
    }

    function injectRailsParams(params){
      params['session_token'] = G.restfulRails.sessionToken;
      params['app_key'] = G.restfulRails.appKey;
      return params;
    }

  }

});


/**
 * Must be called after restfulRails has been defined. Done because each property
 * when initialized by javascript is actually a function execution. Could write
 * this without the load order dependency but this is less code to write
 */
G.provide("",{

  user:function(){
    //We allow a couple convience functions for logging in users
    function override(){
      this.login = function(params, callback){
        G.userSession.create(params, callback);
      }

      this.logout = function(params, callback){
        G.userSession.destroy(params, callback);
      }
      
    }
    override.prototype = new G.restfulRails.Base("/users", "user");

    return new override();
  }(),

  groupit:function(){
    return new G.restfulRails.Base("/groupits", "groupit");
  }(),
  
  userSession:function(){

    var base = new G.restfulRails.Base("/user_sessions", "user_session");

    function override(){
      this.create = function(params, callback){
        base.create(params, function(userSession, xhr){
          G.restfulRails.sessionToken = userSession.token;
          if(callback){
            callback(userSession, xhr);
          }
        });
      }

      delete this.update;
      delete this.read;
      delete this.index;
      
      this.destroy = function(params, callback){
        G.restfulRails.sessionToken = null;
        params = {
          id:0 //Simple hack to make rails route correctly
        }
        base.destroy(params, callback);
      }
    }
    
    override.prototype = base;

    return new override();
  }(),

  participant:function(){
    return new G.restfulRails.Base("/participants", "participant");
  }(),

  paymentResponse:function(){
    return new G.restfulRails.Base("/payment_responses", "payment_response");
  }(),

  note:function(){
    return new G.restfulRails.Base("/notes", "note");
  }(),

  feedPost:function(){
    return new G.restfulRails.Base("/feed_posts", "feed_post");
  }(),

  email:function(){
    return new G.restfulRails.Base("/emails", "email");
  }(),

  contribution:function(){
    return new G.restfulRails.Base("/contributions", "contribution");
  }(),

  authentication:function(){
    return new G.restfulRails.Base("/authentications", "authentication");
  }(),
  
  app:function(){
    return new G.restfulRails.Base("/apps", "app");
  }(),

  address:function(){
    return new G.restfulRails.Base("/addresses", "address");
  }()

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("",{
  route:function(hash, callback){
    G.router.route.call(G.router, hash, callback);
  }
});

G.provide("router", {
  
  routes: [],

  route:function(hash, callback){
    var route = {};
    route.hash = hash;
    route.callback = callback;
    G.router.routes.push(route);
  },

  execRoute:function(){
    for(var i in G.router.routes){
      var route = G.router.routes[i];
      if(window.location.hash == route.hash){
        route.callback();
        return;
      }
    }
  }

});

//TODO need to add dependencies on common so they are loaded first
//Gets called at framework runtime
(function(){
  G.addEvent(window, 'load', G.router.execRoute);
  G.addEvent(window, 'hashchange', G.router.execRoute);

//  backup if hashchange event is not supported for ie7 (bah! FUCKING IE)
//  if(G.browser.ieVersion() < 8){
//    var ieFrame = document.createElement("iframe");
//    var prevHash = null;
//    setInterval(function(){
//      if(window.location.hash != prevHash){
//        G.router.execRoute();
//        prevHash = window.location.hash;
//      }
//    }, 150);
//  }

})();
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *
 * @provides G.pages G.widget
 * @requires G.provide G.ApiClient
 *
 */


/**
 * widget.js
 * Exposes api for manipulating 
 *
 */

G.provide("", {
  require: function(){
    return G.widget.require.apply(G.widget, arguments);
  },

  newWidget:function(){
    return G.widget.instance.apply(G.widget, arguments);
  },

  register:function(){
    return G.widget.register.apply(G.widget, arguments);
  }
  
});

G.provide("widget", {

  constructors: {},
  html:{},

  /**
   * Base constructor for all Widget instances
   */
  Base: function(pageName){

    this._html = G.widget.html[pageName];
    this.rootNode = initRootNode();
    
    function initRootNode(){
      var div = document.createElement("div"); //garbage collected automatically
      div.innerHTML = G.widget.html[pageName];
      return div;
    }

    this.hashOnAttribute = function(hash, attr){
      var elems = this.rootNode.getElementsByTagName("*");
      for(var i in elems){
        var elem = elems[i], pid;
        if(!!elem.getAttribute && !!(pid = elem.getAttribute(attr)) ){
          hash[pid] = elem;
        }
      }
    }

    this.preventDefault = function(e){
      if(!e){
        return;
      }

      //Everyone else support for canceling events
      if(e.preventDefault){
        e.preventDefault();
      }

      //IE support for canceling events
      e.returnValue = false;
    }

  },

  instance:function(pageName){

    if(!G.widget.constructors[pageName]){
      throw("G.widget.instance called on null constructor. ("+pageName+")");
      return;
    }

    var instance;
    (function(realG){ //could limit access to G if needed
      var fn, pids ={}, base, self;

      //Forces pageconstructor to be lexicaly bound to our current context
      //instead of iframe (current context should be current closure and
      //then main page closure)
      eval("fn = "+G.widget.constructors[pageName].toString()+";");

      //By default hash all elems with a pid for quick lookup later
      //pids hash avail in page (looks like global) but is just bound
      //in that page. (<3 closures). Do before instance is created so
      //pids hash can be referenced during instansiation.
      base = new realG.widget.Base(pageName);
      fn.prototype = base;
      base.hashOnAttribute(pids, "pid");

      instance = new fn();
      self = instance;

    })(G);

    return instance;
  },

  register: function(pageName, pageConstructor){
    
    if(typeof pageConstructor != "function"){
      throw("Fatal: G.widget.register only takes a constructor function as a argument");
      return;
    }
          
    G.widget.constructors[pageName] = pageConstructor;
  },

  require:function(path, pageName){
    G.widget.require.pages = G.Page.require.pages || {};

    pageName = pageName || G.widget.pathToName(path);
    
    //No Op when the page has already been required
    if(G.widget.require.pages[pageName]){
      return;
    }

    G.widget.require.pages[pageName] = pageName;

    
    if(!G.widget.constructors[pageName]){
      G.widget.fetch(path, pageName);
    }

  },

  ready:function(pageNames, callback){
    var intervalId,
    timeWaiting = 0,
    interval = 50;

    intervalId = setInterval(function(){
      timeWaiting += interval
      if(timeWaiting > 1000){
        G.log("G.widget.ready waiting over a second for ready state.");
        timeWaiting = 0;
      }

      for(var i in pageNames){
        var pageName = pageNames[i];
        if(!G.widget.constructors[pageName]){
          return;
        }
      }
      clearInterval(intervalId);

      callback();

    }, interval);
  },
  
  fetch: function(){
    var args = Array.prototype.slice.call(arguments),
    path = args.shift(),
    next = args.shift(),
    pageName,
    callback;

    while(next){
      var type = typeof next;

      if (type === 'string' && !pageName) {
        pageName = next;
      } else if (type === 'function' && !callback) {
        callback = next;
      }
      else{
        G.log('Invalid argument passed to G.widget.fetch(): ' + next);
        return;
      }
      next = args.shift();
    }


    //Default pageName will be the route to it with / replaced with undescores
    pageName = pageName || G.widget.pathToName(path);

    G.widget.fetchRequest(path, pageName, callback);
  },

  pathToName:function(path){
    return path.replace(/\//g, "_");
  },


  /**
   *
   */

  fetchRequest: function(path, pageName, callback ){

    //Preamble = dirty magic to pull references into iframe,
    //couples js with controller :(
    var preamble = "<script>window.G = top."+ globalName +";</script>";

    G.ApiClient.rest('widgets/show','get', {
      path: path,
      preamble: preamble,
      page_name: pageName
    }, function(html){

      if(!!callback){
        callback(G.widget.constructors[pageName]);
      }
    });
  }
});

  })(window);