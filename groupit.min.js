/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Note on: function(window, undefined)
 *
 * The undefined is a normal variable and can be changed simply with
 * undefined = "new value";. So we create a local "undefined" variable
 * that is REALLY undefined. (see jquery source for example in the wild)
 *
 * The window variable is made local for performance reasons.
 * Because when javascipt looks up a variable, it first goes through the
 * local variables until it finds the variable name. When it's not found,
 * javascript goes through the next scope etc. until it filters through the
 * global variables. So if the window variable is made local, javascript
 * can look it up quicker.
 *
 * Source (Nicholas C. Zakas and Jquery)
 *
 */

/**
 * This is a wrapper that our entire sdk goes into. Its written into by
 * a compiler script don't edit this file unless you know what you are doing.
 */

(function(window, undefined){

  /**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

/**
 * Entry point into groupit javascript SDK.
 *
 * The entire SDK is wrapped in a closure when compiled so don't let
 * the seemingly global definitions confuse you. They are global to the SDK
 * but not to the app.
 */

//Save references in case of overwrite/no conflict mode
var _G = window.G;
var _isLogging = true;
window.A = "Primary window"; //DEBUG

var G = G || {
  /**
   * Copy from one object to the specified namespace that is G.<target>.
   * If the namespace target doesn't exist, it will be created automatically.
   *
   * @param target    {Object|String}  the target object to copy into
   * @param source    {Object}         the source object to copy from
   * @param overwrite {Boolean}        indicate if we should overwrite
   * @return {Object} the *same* target object back
   */
  provide: function(target, source, overwrite){
    return this.copy(
      typeof target == 'string' ? this.create(target) : target,
      source,
      overwrite
      );
  },
  /**
   * Create a namespaced object.
   *
   * @param name {String} full qualified name ('Util.foo', etc.)
   * @param value {Object} value to set. Default value is {}. [Optional]
   * @return {Object} The created object
   */
  create: function(name, value) {
    var node = G,
    nameParts = name ? name.split('.') : [],
    len = nameParts.length;
    for (var i = 0; i < len; i++) {
      var part = nameParts[i];
      var nso = node[part]; //nso = namespaced object
      if (!nso) { //prevents overriding
        nso = (value && i + 1 == len) ? value : {};
        node[part] = nso;
      }
      node = nso;
    }
    return node;
  },
  /**
   * Copies things from source into target.
   *
   * @param target    {Object}
   * @param source    {Object}
   * @param overwrite {Boolean}
   * @param transform  {function} [Optional], transformation function for
   *                            each item
   */
  copy: function(target, source, overwrite, transform) {
    for (var key in source) {
      if (overwrite || typeof target[key] === 'undefined') {
        target[key] = transform ? transform(source[key]) :  source[key];
      }
    }
    return target;
  },
  /**
   * Removes standard groupit bindings from global namespace and
   *   replaces with user supplied alternative.
   *
   * @param altName {String} alternative global reference name
   */
  noConflict: function(altName){
    //noConflicting with G sets to default
    if(altName == "G"){
      window.G = G;
      
    }
    else if (altName){
      window[altName] = G;
      window.G = _G; //replace G with what was G before
    }

    globalName = altName;
    return G;
  }
};

//Do the proper bindings for the window.
window.G = G;

//SDK reference to itself in the caller's global namespace
var globalName = "G";

/**
 * Copyright (c) 2010 Timothy Cardenas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @provides G.api G.ApiClient
 * @requires G.provide G.Array
 *
 */
 
G.provide('', {

  //Indirection method for the api calls. Can expand out
  //for richer debuging support, etc
  api: function(){
    G.ApiClient.rest.apply(G.ApiClient, arguments);    
  }

});

G.provide('ApiClient', {
  REST_METHODS: ['get', 'post','delete', 'put'],
  REST_BASE_URL: "http://localhost:3000/",

  /**
   *   rest: REST access to our server with various calling options.
   *    
   *   Except for the path all the arguments to this function are 
   *   optional. Below are examples of valid invocations.
   *
   *  G.api('gift/delete'); // throw away the response
   *  G.api('gift/delete'), function(r){console.log(r)});
   *  G.api('gift/show'), { param1: 'value1', ... }); //throw away response
   *  G.api('gift', 'put', function(r){ console.log(r) });
   *  G.api(
   *    'gift/create',
   *    'post',
   *    {param1: value1, param2 : value2, ...},
   *    function(r) { console.log(r) }
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   * @param cb        {Function} the callback function for the response 
   */

  rest: function(){
    var 
    args = Array.prototype.slice.call(arguments),
    path = args.shift(),
    next = args.shift(),
    method,
    params,
    cb;
     
    while(next){
      var type = typeof next;
      if (type === 'string' && !method) {
        method = next.toLowerCase();
      } else if (type === 'function' && !cb) {
        cb = next;
      } else if (type === 'object' && !params) {
        params = next;
      } else {
        G.log('Invalid argument passed to G.api(): ' + next);
        return;
      }
      next = args.shift();
    }

    method = method || 'get';
    params = params || {};

    // remove prefix slash if one is given, as it's already in the base url
    if (path[0] === '/') {
      path = path.substr(1);
    }

    if (G.Array.indexOf(G.ApiClient.REST_METHODS, method) < 0){
      console.log('failed on rest methods');
      return; //Need to create a logging mech
    }

    G.ApiClient.iframeRequest(path, method, params,cb);
  },

  /**
   * iframeRequest: Creates a form and submits from params
   *
   *
   * @access private
   * @param path      {String}   the url path
   * @param method    {String}   the http method
   * @param params    {Object}   the parameters for the query
   * @param cb        {Function} the callback function for the response
   */
  iframeRequest: function(path, method, params, cb){
     
    var iframe = document.createElement('iframe');
    iframe.style.display = "absolute";
    iframe.style.top = "-10000px";
    iframe.style.height = "0px";
    iframe.style.width = "0px";
    
    document.body.appendChild(iframe); //initializes iframe
    

    var form = document.createElement('form');
    form.action = this.REST_BASE_URL + path;
    form.method = method;

    for(key in params){
      var input = document.createElement('input');
      input.type ='text'; //DEBUG text
      input.name = key;
      input.value = params[key];
      form.appendChild(input);
    }

    //Load the content after submission to the callback
    if(cb){
      iframe.onload = function(){

        var content;
        //the callback() method is inserted into our frame as a JSONP method
        if(!!iframe.contentWindow.callback){
          content= iframe.contentWindow.callback();
        }else{
          //Not a JSONP response, assume html/js is response and pass back
          content = iframe.contentWindow.document.body.innerHTML;
        }

        //Remember javascript uses static scoping (this callback will run
        //in the context of its definition and not where its being called--iframe)
        cb(content);
        
        //We have to set a timeout to kill the parent and let the onload
        //finish otherwise we get errors in browsers thinking that the response
        //never arrived. Functions like a 'after_load' event
        setTimeout(function(){
          //document.body.removeChild(iframe);
        }, 1); //IE doesn't accept 0 and all browsers round up to min delay ~10ms

      }
    }
      
    iframe.contentWindow.document.body.appendChild(form);    
    form.submit();
  }

});
/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

G.provide("gift", function(method){

  //public methods for gift
  var methods = {
    create: function(){
      
    }
  }

  if ( methods[method] ) {
    return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
  } else if ( typeof method === 'object' || ! method ) {
    return methods.init.apply( this, arguments );
  } else {
    $.error( 'Method ' +  method + ' does not exist on jQuery.tooltip' );
  }
  

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */


G.provide("user",{

  /**
   * Param Options
   * {
   *   name: name,
   *   email: email,
   *   password: password,
   *   password_confirm: passwordConfirm
   * }
   */
  create:function(params, callback){
    G.api("/users", "post", params, callback);
  },

  /**
   *  Param options
   * {id: userId}
   */
  read:function(params, callback){
    G.api("/users", "get", params, callback);
  },
  
  /**
   * Param options are any subset of create
   */
  update:function(params, callback){
    G.api("/users", "put", params, callback);
  },

  /**
   *  Param options
   * { gift_hash: giftHash } or {id: giftId}
   */
  remove:function(params, callback){
    G.api("/users", "put", params, callback);
  }

});/**
 * Copyright (c) 2010 Timothy Cardenas
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



G.provide("pages");

G.provide("", {
  fetch: function(){
    G.Page.fetch.apply(G.Page, arguments);
  }
});

G.provide("Page", {

  constructors: {},

  Base: function(pageName){

    this.rootNode = document.getElementById(pageName);
    this._html = this.rootNode.innerHTML;

    this.hashOnAttribute = function(hash, attr){
      var elems = this.rootNode.getElementsByTagName("*");
      for(var i in elems){
        var elem = elems[i], pid;
        if(!!elem.getAttribute && !!(pid = elem.getAttribute(attr)) ){
          hash[pid] = elem;
        }
      }
    },

    this.preventDefault = function(e){
      if(!e){
        return;
      }

      //Everyone else support for canceling events
      if(e.preventDefault){
        e.preventDefault();
      }

      //IE support for canceling events
      e.returnValue = false;
    }

  },

  create: function(pageName, pageConstructor){
    
    if(typeof pageConstructor != "function"){
      throw("Fatal: G.addPage only takes a constructor function as a argument");
      return;
    }

    G.Page.constructors[pageName] = pageConstructor;
  },
  
  fetch: function(){
    var args = Array.prototype.slice.call(arguments),
    path = args.shift(),
    container = args.shift(),
    next = args.shift(),
    pageName,
    callback;

    while(next){
      var type = typeof next;

      if (type === 'string' && !pageName) {
        pageName = next;
      } else if (type === 'function' && !callback) {
        callback = next;
      }
      else{
        G.log('Invalid argument passed to G.Page.fetch(): ' + next);
        return;
      }
      next = args.shift();
    }
    
    if(!container.appendChild){
      throw("Fetch called with invalid container. "+
        "Must be able to attachChild on it. Jquery: try $('someSelector')[0]");
    }


    //Default pageName will be the route to it with / replaced with undescores
    pageName = pageName || path.replace(/\//g, "_");

    G.Page.fetchRequest(path, container, pageName, callback);
  },



  fetchRequest: function(path, container, pageName, callback ){

    //Preamble = dirty magic to pull references into iframe,
    //couples js with controller :(
    var preamble = "<script>window.G = top."+ globalName +";</script>";

    G.ApiClient.rest('view_modules/page','get', {
      path: path,
      preamble: preamble
    }, function(html){

      console.log(pageName)
      G.pages[pageName] = G.Page.instantiate(pageName, container, html);

      if(!!callback){
        callback(G.pages[pageName]);
      }
    });
  },

  instantiate:function(pageName, container, html){

    //Append html to client supplied container
    var div = document.createElement("div"); //garbage collected automatically
    div.innerHTML = html;
    for(var i=0; i < div.childNodes.length; ++i){
      container.appendChild(div.childNodes[i]);
    }

    var pageDiv = document.getElementById(pageName);
    if(!pageDiv){
      throw("No page wrapper for page:"+pageName+" all pages must be wrapped"+
        "in a div with id equal to the page's name");
      return undefined;
    }

    var instance;
    (function(realG){
      var G ={}, fn, pids ={}, base;

      //We only allow access to the api from G in our pages. Encapsulates page
      //implementation and explicitly prevents coupling between pages.

      //TODO probably need to have some kind of permission coupling heirarchy.
      //that way we can have nested pages
      G['api'] = realG.api;
      G['user'] = realG.user;


      //Forces pageconstructor to be lexicaly bound to our current context
      //instead of iframe (current context should be current closure and
      //then main page closure)
      eval("fn = "+realG.Page.constructors[pageName].toString());

      //By default hash all elems with a pid for quick lookup later
      //pids hash avail in page (looks like global) but is just bound
      //in that page. (<3 closures). Do before instance is created so
      //pids hash can be referenced during instansiation.
      base = new realG.Page.Base(pageName);
      fn.prototype = base;
      base.hashOnAttribute(pids, "pid");

      instance = new fn();
      
    })(G);

    return instance;

  }
});/**
 * Copyright (c) 2010 Timothy Cardenas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
  
G.provide('Array', {
  
  // This is native javascript function HOWEVER IE (7) BLOWS
  // and we force its definition here if its not defined
  indexOf: function (array, item){
    if (array.indexOf) {
      return array.indexOf(item);
    }
    var length = array.length;
    if (length) {
      for (var index = 0; index < length; index++) {
        if (array[index] === item) {
          return index;
        }
      }
    }
    return -1;
  }


});
G.provide("log", function(){

  //TODO make a loging feature


});

  })(window);